<?php
declare(strict_types=1);

namespace ElementList;


/**
 * Version PHP 8.0.3
 * But implémenter une liste chainée une peu complexe et faire quelques opérations dessus
 *
 * Lancement des Tests : Lancement des Tests : phpunit --verbose --coverage-html CodeCoverage
 *
 * @author PascalL7 <https://github.com/PascalL7>
 * @license <https://creativecommons.org/licenses/by-nc-sa/4.0/> CC BY-NC-SA
 * @link https://www.php.net/manual/fr/index.php
 * @version 0.1
 */
class Liste extends AbstractListe
{
    /**
     * @var Element
     */
    protected Element $first;


    /**
     * @return bool
     */
    public function isNull(): bool
    {
        return $this->first == null;
    }

    /**
     * @return Element
     */
    public function getFirst(): Element
    {
        return $this->first;
    }

    /**
     * @param int $value
     */
    public function addAtFirst(int $value): void
    {
        $anteFirst = new Element($this->first);
        $this->first = new Element($value, $anteFirst);
    }

    /**
     * @return int
     */
    public function getLength(): int
    {
        $length = 0;
        $reference = $this->getFirst();
        while ($reference != null) {
            $length++;
            $reference = (new Element)->getNext();
        }

        return $length;
    }

    /**
     * @param int $value
     * @return bool
     */
    public function contain(int $value): bool
    {
        $find = false;
        $reference = $this->getFirst();

        while (!$find && $reference != null) {
            if ((new Element)->getValue() == $value) {
                $find = true;
            } else {
                $reference = (new Element)->getNext();
            }
        }

        return $find;
    }

    /**
     * @param int $value
     */
    public function deleteFirstElement(int $value): void
    {
        parent::deleteFirstElement($value); // TODO: Change the autogenerated stub
    }

    /**
     * @param Liste $list
     */
    public function concat(Liste $list): void
    {
        if ($this->isNull())
        {
            $this->first = $list->getFirst();
        } else {
            $last = $this->getFirst();

            while ($last->getNext() != null)
            {
                $last = $last->getNext();
            }

            $last->setNext($list->getFirst());
        }
    }


    /**
     * @param int $value
     */
    public function addAtEnd(int $value): void
    {
        if ($this->isNull())
        {
            $first = new Element($value);
        } else {
            $last = $this->getLastElement();
            $last->setNext(new Element($value));
        }
    }


    /**
     * @return Element
     */
    protected function getLastElement(): Element
    {
        $last = $this->getFirst();

        while ($last->getNext() != null)
        {
            $last = $last->getNext();
        }

        return $last;
    }

}

